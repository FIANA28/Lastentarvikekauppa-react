import jwt from 'jsonwebtoken';


// utility function like generateToken (used in userRouter.api) middleware
export const generateToken = (user) => {
    return jwt.sign(
        {
        _id: user._id,
        name: user.name,
        email: user.email,
        isAdmin: user.isAdmin,
        }, process.env.JWT_SECRET || 'somethingsecret',
        {
            expiresIn: '30d',
        } 
    );
};

// middleware to auth the user
export const isAuth = (req, res, next) => {
    const authorization = req.headers.authorization;
    if (authorization) {
        const token = authorization.slice(7, authorization.length); //Bearer xxxxxx
        // The bearer token is a cryptic string, usually generated by the server in response to a login request.
    jwt.verify(
        token, 
        process.env.JWT_SECRET || 'somethingsecret', 
        (err, decode) => {
            if (err) {
                res.status(401).send({ message: 'Invalid Token'});
            } else {
                req.user = decode;
            next();
            }
        });
    } else {
        res.status(401). send({ message: 'No Token'});
    }
};
//middleware to auth the admin, use to protect api for admin, like updating products etc.
export const isAdmin = (req, res, next) => {
    if (req.user && req.user.isAdmin) {
        next();
    } else {
        res.status(401). send({ message: 'Invalid Admin Token'});
    }
};

